# Server Settings
server.port = 8095
server.servlet.context-path=/

#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
#spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_ON_EXIT=FALSE


# JPA & Hibernate Settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.id.new_generator_mappings = false
spring.jpa.properties.hibernate.format_sql = true
spring.jpa.properties.hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext

#Logging Settings
logging.level.org.hibernate.SQL=ERROR
logging.level.org.hibernate.type=ERROR
logging.level.org.springframework=ERROR
logging.level.com=ERROR

#  Datasource Settings
spring.datasource.url=jdbc:postgresql://${AWS_RDS_HOSTNAME:localhost}:${AWS_RDS_PORT:5432}/${AWS_RDS_DB_NAME:vesseldb}?allowPublicKeyRetrieval=true&useSSL=false
spring.datasource.username=${AWS_RDS_USERNAME:postgres}
spring.datasource.password=${AWS_RDS_PASSWORD:password}

spring.datasource.driver-class-name=org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1